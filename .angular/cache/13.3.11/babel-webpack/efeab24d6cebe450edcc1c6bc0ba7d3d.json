{"ast":null,"code":"import { BehaviorSubject, queueScheduler, Observable } from 'rxjs';\nimport { observeOn, scan, map, distinctUntilChanged } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @template T\n */\n\nclass MiniState extends BehaviorSubject {\n  /**\n   * @param {?} _initialState\n   * @param {?} actionsDispatcher$\n   * @param {?} reducer\n   */\n  constructor(_initialState, actionsDispatcher$, reducer) {\n    super(_initialState);\n    /** @type {?} */\n\n    const actionInQueue$ = actionsDispatcher$.pipe(observeOn(queueScheduler));\n    /** @type {?} */\n\n    const state$ = actionInQueue$.pipe(scan(\n    /**\n    * @param {?} state\n    * @param {?} action\n    * @return {?}\n    */\n    (state, action) => {\n      if (!action) {\n        return state;\n      }\n\n      return reducer(state, action);\n    }, _initialState));\n    state$.subscribe(\n    /**\n    * @param {?} value\n    * @return {?}\n    */\n    value => this.next(value));\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @template T\n */\n\n\nclass MiniStore extends Observable {\n  /**\n   * @param {?} _dispatcher\n   * @param {?} _reducer\n   * @param {?} state$\n   */\n  constructor(_dispatcher, _reducer,\n  /* tslint:disable-next-line: no-any */\n  state$) {\n    super();\n    this._dispatcher = _dispatcher;\n    this._reducer = _reducer;\n    /* tslint:disable-next-line: deprecation */\n\n    this.source = state$;\n  }\n  /**\n   * @template R\n   * @param {?} pathOrMapFn\n   * @return {?}\n   */\n\n\n  select(pathOrMapFn) {\n    /* tslint:disable-next-line: deprecation */\n\n    /** @type {?} */\n    const mapped$ = this.source.pipe(map(pathOrMapFn));\n    return mapped$.pipe(distinctUntilChanged());\n  }\n  /**\n   * @template R\n   * @param {?} operator\n   * @return {?}\n   */\n\n\n  lift(operator) {\n    /** @type {?} */\n    const store = new MiniStore(this._dispatcher, this._reducer, this);\n    /* tslint:disable-next-line: deprecation */\n\n    store.operator = operator;\n    return store;\n  }\n  /**\n   * @param {?} action\n   * @return {?}\n   */\n\n\n  dispatch(action) {\n    this._dispatcher.next(action);\n  }\n  /**\n   * @param {?} action\n   * @return {?}\n   */\n\n\n  next(action) {\n    this._dispatcher.next(action);\n  }\n  /* tslint:disable-next-line: no-any */\n\n  /**\n   * @param {?} err\n   * @return {?}\n   */\n\n\n  error(err) {\n    this._dispatcher.error(err);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  complete() {\n    /*noop*/\n  }\n\n}\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  MiniStore.prototype._dispatcher;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MiniStore.prototype._reducer;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @record\n */\n\n\nfunction Action() {}\n\nif (false) {\n  /** @type {?} */\n  Action.prototype.type;\n  /** @type {?|undefined} */\n\n  Action.prototype.payload;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { MiniState, MiniStore }; //# sourceMappingURL=ngx-bootstrap-mini-ngrx.js.map","map":null,"metadata":{},"sourceType":"module"}