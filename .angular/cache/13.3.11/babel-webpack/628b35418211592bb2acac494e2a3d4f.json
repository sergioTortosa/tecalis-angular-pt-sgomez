{"ast":null,"code":"import { Injectable, ɵɵdefineInjectable, Component, ChangeDetectionStrategy, EventEmitter, Directive, ViewContainerRef, ElementRef, Renderer2, Input, Output, NgModule } from '@angular/core';\nimport { isBs3, warnOnce, parseTriggers, OnChange } from 'ngx-bootstrap/utils';\nimport { __decorate, __metadata } from 'tslib';\nimport { ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';\nimport { PositioningService } from 'ngx-bootstrap/positioning';\nimport { timer } from 'rxjs';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Default values provider for tooltip\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'ngx-bootstrap/component-loader';\nimport * as ɵngcc2 from 'ngx-bootstrap/positioning';\nconst _c0 = [\"*\"];\nlet TooltipConfig = /*#__PURE__*/(() => {\n  class TooltipConfig {\n    constructor() {\n      /**\n       * sets disable adaptive position\n       */\n      this.adaptivePosition = true;\n      /**\n       * tooltip placement, supported positions: 'top', 'bottom', 'left', 'right'\n       */\n\n      this.placement = 'top';\n      /**\n       * array of event names which triggers tooltip opening\n       */\n\n      this.triggers = 'hover focus';\n      /**\n       * delay before showing the tooltip\n       */\n\n      this.delay = 0;\n    }\n\n  }\n\n  TooltipConfig.ɵfac = function TooltipConfig_Factory(t) {\n    return new (t || TooltipConfig)();\n  };\n  /** @nocollapse */\n\n\n  TooltipConfig.ɵprov = ɵɵdefineInjectable({\n    factory: function TooltipConfig_Factory() {\n      return new TooltipConfig();\n    },\n    token: TooltipConfig,\n    providedIn: \"root\"\n  });\n  return TooltipConfig;\n})();\n\nif (false) {\n  /**\n   * sets disable adaptive position\n   * @type {?}\n   */\n  TooltipConfig.prototype.adaptivePosition;\n  /**\n   * tooltip placement, supported positions: 'top', 'bottom', 'left', 'right'\n   * @type {?}\n   */\n\n  TooltipConfig.prototype.placement;\n  /**\n   * array of event names which triggers tooltip opening\n   * @type {?}\n   */\n\n  TooltipConfig.prototype.triggers;\n  /**\n   * a selector specifying the element the tooltip should be appended to.\n   * @type {?}\n   */\n\n  TooltipConfig.prototype.container;\n  /**\n   * delay before showing the tooltip\n   * @type {?}\n   */\n\n  TooltipConfig.prototype.delay;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet TooltipContainerComponent = /*#__PURE__*/(() => {\n  class TooltipContainerComponent {\n    /**\n     * @param {?} config\n     */\n    constructor(config) {\n      Object.assign(this, config);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get isBs3() {\n      return isBs3();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterViewInit() {\n      this.classMap = {\n        in: false,\n        fade: false\n      };\n      this.classMap[this.placement] = true;\n      this.classMap[`tooltip-${this.placement}`] = true;\n      this.classMap.in = true;\n\n      if (this.animation) {\n        this.classMap.fade = true;\n      }\n\n      if (this.containerClass) {\n        this.classMap[this.containerClass] = true;\n      }\n    }\n\n  }\n\n  TooltipContainerComponent.ɵfac = function TooltipContainerComponent_Factory(t) {\n    return new (t || TooltipContainerComponent)(ɵngcc0.ɵɵdirectiveInject(TooltipConfig));\n  };\n\n  TooltipContainerComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: TooltipContainerComponent,\n    selectors: [[\"bs-tooltip-container\"]],\n    hostAttrs: [\"role\", \"tooltip\"],\n    hostVars: 7,\n    hostBindings: function TooltipContainerComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassMap(\"tooltip in tooltip-\" + ctx.placement + \" \" + \"bs-tooltip-\" + ctx.placement + \" \" + ctx.placement + \" \" + ctx.containerClass);\n        ɵngcc0.ɵɵclassProp(\"show\", !ctx.isBs3)(\"bs3\", ctx.isBs3);\n      }\n    },\n    ngContentSelectors: _c0,\n    decls: 3,\n    vars: 0,\n    consts: [[1, \"tooltip-arrow\", \"arrow\"], [1, \"tooltip-inner\"]],\n    template: function TooltipContainerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelement(0, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    styles: [\".tooltip[_nghost-%COMP%] {\\n      display: block;\\n      pointer-events: none;\\n    }\\n    .bs3.tooltip.top[_nghost-%COMP%] > .arrow[_ngcontent-%COMP%] {\\n      margin-left: -2px;\\n    }\\n    .bs3.tooltip.bottom[_nghost-%COMP%] {\\n      margin-top: 0px;\\n    }\\n    .bs3.bs-tooltip-left[_nghost-%COMP%], .bs3.bs-tooltip-right[_nghost-%COMP%]{\\n      margin: 0px;\\n    }\\n    .bs3.bs-tooltip-right[_nghost-%COMP%]   .arrow[_ngcontent-%COMP%], .bs3.bs-tooltip-left[_nghost-%COMP%]   .arrow[_ngcontent-%COMP%] {\\n      margin: .3rem 0;\\n    }\"],\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return TooltipContainerComponent;\n})();\n\nif (false) {\n  /** @type {?} */\n  TooltipContainerComponent.prototype.classMap;\n  /** @type {?} */\n\n  TooltipContainerComponent.prototype.placement;\n  /** @type {?} */\n\n  TooltipContainerComponent.prototype.containerClass;\n  /** @type {?} */\n\n  TooltipContainerComponent.prototype.animation;\n  /** @type {?} */\n\n  TooltipContainerComponent.prototype.id;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nlet id = 0;\n\nclass TooltipDirective {\n  /**\n   * @param {?} _viewContainerRef\n   * @param {?} cis\n   * @param {?} config\n   * @param {?} _elementRef\n   * @param {?} _renderer\n   * @param {?} _positionService\n   */\n  constructor(_viewContainerRef, cis, config, _elementRef, _renderer, _positionService) {\n    this._elementRef = _elementRef;\n    this._renderer = _renderer;\n    this._positionService = _positionService;\n    this.tooltipId = id++;\n    /**\n     * Fired when tooltip content changes\n     */\n\n    /* tslint:disable-next-line:no-any */\n\n    this.tooltipChange = new EventEmitter();\n    /**\n     * Css class for tooltip container\n     */\n\n    this.containerClass = '';\n    /**\n     * @deprecated - removed, will be added to configuration\n     */\n\n    this.tooltipAnimation = true;\n    /**\n     * @deprecated\n     */\n\n    this.tooltipFadeDuration = 150;\n    /**\n     * @deprecated\n     */\n\n    this.tooltipStateChanged = new EventEmitter();\n    this._tooltip = cis.createLoader(this._elementRef, _viewContainerRef, this._renderer).provide({\n      provide: TooltipConfig,\n      useValue: config\n    });\n    Object.assign(this, config);\n    this.onShown = this._tooltip.onShown;\n    this.onHidden = this._tooltip.onHidden;\n  }\n  /**\n   * Returns whether or not the tooltip is currently being shown\n   * @return {?}\n   */\n\n\n  get isOpen() {\n    return this._tooltip.isShown;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set isOpen(value) {\n    if (value) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n  /**\n   * @deprecated - please use `tooltip` instead\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set htmlContent(value) {\n    warnOnce('tooltipHtml was deprecated, please use `tooltip` instead');\n    this.tooltip = value;\n  }\n  /**\n   * @deprecated - please use `placement` instead\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set _placement(value) {\n    warnOnce('tooltipPlacement was deprecated, please use `placement` instead');\n    this.placement = value;\n  }\n  /**\n   * @deprecated - please use `isOpen` instead\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set _isOpen(value) {\n    warnOnce('tooltipIsOpen was deprecated, please use `isOpen` instead');\n    this.isOpen = value;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get _isOpen() {\n    warnOnce('tooltipIsOpen was deprecated, please use `isOpen` instead');\n    return this.isOpen;\n  }\n  /**\n   * @deprecated - please use `isDisabled` instead\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set _enable(value) {\n    warnOnce('tooltipEnable was deprecated, please use `isDisabled` instead');\n    this.isDisabled = !value;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get _enable() {\n    warnOnce('tooltipEnable was deprecated, please use `isDisabled` instead');\n    return this.isDisabled;\n  }\n  /**\n   * @deprecated - please use `container=\"body\"` instead\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set _appendToBody(value) {\n    warnOnce('tooltipAppendToBody was deprecated, please use `container=\"body\"` instead');\n    this.container = value ? 'body' : this.container;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get _appendToBody() {\n    warnOnce('tooltipAppendToBody was deprecated, please use `container=\"body\"` instead');\n    return this.container === 'body';\n  }\n  /**\n   * @deprecated - will replaced with customClass\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set _popupClass(value) {\n    warnOnce('tooltipClass deprecated');\n  }\n  /**\n   * @deprecated - removed\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set _tooltipContext(value) {\n    warnOnce('tooltipContext deprecated');\n  }\n  /**\n   * @deprecated\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set _tooltipPopupDelay(value) {\n    warnOnce('tooltipPopupDelay is deprecated, use `delay` instead');\n    this.delay = value;\n  }\n  /**\n   * @deprecated -  please use `triggers` instead\n   * @return {?}\n   */\n\n\n  get _tooltipTrigger() {\n    warnOnce('tooltipTrigger was deprecated, please use `triggers` instead');\n    return this.triggers;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set _tooltipTrigger(value) {\n    warnOnce('tooltipTrigger was deprecated, please use `triggers` instead');\n    this.triggers = (value || '').toString();\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnInit() {\n    this._tooltip.listen({\n      triggers: this.triggers,\n      show:\n      /**\n      * @return {?}\n      */\n      () => this.show()\n    });\n    /* tslint:disable-next-line:no-any */\n\n\n    this.tooltipChange.subscribe(\n    /**\n    * @param {?} value\n    * @return {?}\n    */\n    value => {\n      if (!value) {\n        this._tooltip.hide();\n      }\n    });\n    this.onShown.subscribe(\n    /**\n    * @return {?}\n    */\n    () => {\n      this.setAriaDescribedBy();\n    });\n    this.onHidden.subscribe(\n    /**\n    * @return {?}\n    */\n    () => {\n      this.setAriaDescribedBy();\n    });\n  }\n  /**\n   * @return {?}\n   */\n\n\n  setAriaDescribedBy() {\n    this._ariaDescribedby = this.isOpen ? `tooltip-${this.tooltipId}` : null;\n\n    if (this._ariaDescribedby) {\n      this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-describedby', this._ariaDescribedby);\n    } else {\n      this._renderer.removeAttribute(this._elementRef.nativeElement, 'aria-describedby');\n    }\n  }\n  /**\n   * Toggles an element’s tooltip. This is considered a “manual” triggering of\n   * the tooltip.\n   * @return {?}\n   */\n\n\n  toggle() {\n    if (this.isOpen) {\n      return this.hide();\n    }\n\n    this.show();\n  }\n  /**\n   * Opens an element’s tooltip. This is considered a “manual” triggering of\n   * the tooltip.\n   * @return {?}\n   */\n\n\n  show() {\n    this._positionService.setOptions({\n      modifiers: {\n        flip: {\n          enabled: this.adaptivePosition\n        },\n        preventOverflow: {\n          enabled: this.adaptivePosition\n        }\n      }\n    });\n\n    if (this.isOpen || this.isDisabled || this._delayTimeoutId || !this.tooltip) {\n      return;\n    }\n    /** @type {?} */\n\n\n    const showTooltip =\n    /**\n    * @return {?}\n    */\n    () => {\n      if (this._delayTimeoutId) {\n        this._delayTimeoutId = undefined;\n      }\n\n      this._tooltip.attach(TooltipContainerComponent).to(this.container).position({\n        attachment: this.placement\n      }).show({\n        content: this.tooltip,\n        placement: this.placement,\n        containerClass: this.containerClass,\n        id: `tooltip-${this.tooltipId}`\n      });\n    };\n    /** @type {?} */\n\n\n    const cancelDelayedTooltipShowing =\n    /**\n    * @return {?}\n    */\n    () => {\n      if (this._tooltipCancelShowFn) {\n        this._tooltipCancelShowFn();\n      }\n    };\n\n    if (this.delay) {\n      if (this._delaySubscription) {\n        this._delaySubscription.unsubscribe();\n      }\n\n      this._delaySubscription = timer(this.delay).subscribe(\n      /**\n      * @return {?}\n      */\n      () => {\n        showTooltip();\n        cancelDelayedTooltipShowing();\n      });\n\n      if (this.triggers) {\n        parseTriggers(this.triggers).forEach(\n        /**\n        * @param {?} trigger\n        * @return {?}\n        */\n        trigger => {\n          this._tooltipCancelShowFn = this._renderer.listen(this._elementRef.nativeElement, trigger.close,\n          /**\n          * @return {?}\n          */\n          () => {\n            this._delaySubscription.unsubscribe();\n\n            cancelDelayedTooltipShowing();\n          });\n        });\n      }\n    } else {\n      showTooltip();\n    }\n  }\n  /**\n   * Closes an element’s tooltip. This is considered a “manual” triggering of\n   * the tooltip.\n   * @return {?}\n   */\n\n\n  hide() {\n    if (this._delayTimeoutId) {\n      clearTimeout(this._delayTimeoutId);\n      this._delayTimeoutId = undefined;\n    }\n\n    if (!this._tooltip.isShown) {\n      return;\n    }\n\n    this._tooltip.instance.classMap.in = false;\n    setTimeout(\n    /**\n    * @return {?}\n    */\n    () => {\n      this._tooltip.hide();\n    }, this.tooltipFadeDuration);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this._tooltip.dispose();\n\n    this.tooltipChange.unsubscribe();\n\n    if (this._delaySubscription) {\n      this._delaySubscription.unsubscribe();\n    }\n\n    this.onShown.unsubscribe();\n    this.onHidden.unsubscribe();\n  }\n\n}\n\nTooltipDirective.ɵfac = function TooltipDirective_Factory(t) {\n  return new (t || TooltipDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ComponentLoaderFactory), ɵngcc0.ɵɵdirectiveInject(TooltipConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.PositioningService));\n};\n\nTooltipDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: TooltipDirective,\n  selectors: [[\"\", \"tooltip\", \"\"], [\"\", \"tooltipHtml\", \"\"]],\n  inputs: {\n    containerClass: \"containerClass\",\n    tooltipAnimation: \"tooltipAnimation\",\n    tooltipFadeDuration: \"tooltipFadeDuration\",\n    isOpen: \"isOpen\",\n    htmlContent: [\"tooltipHtml\", \"htmlContent\"],\n    tooltip: \"tooltip\",\n    _placement: [\"tooltipPlacement\", \"_placement\"],\n    placement: \"placement\",\n    _isOpen: [\"tooltipIsOpen\", \"_isOpen\"],\n    _enable: [\"tooltipEnable\", \"_enable\"],\n    isDisabled: \"isDisabled\",\n    _appendToBody: [\"tooltipAppendToBody\", \"_appendToBody\"],\n    container: \"container\",\n    _popupClass: [\"tooltipClass\", \"_popupClass\"],\n    _tooltipContext: [\"tooltipContext\", \"_tooltipContext\"],\n    _tooltipPopupDelay: [\"tooltipPopupDelay\", \"_tooltipPopupDelay\"],\n    delay: \"delay\",\n    _tooltipTrigger: [\"tooltipTrigger\", \"_tooltipTrigger\"],\n    triggers: \"triggers\",\n    adaptivePosition: \"adaptivePosition\"\n  },\n  outputs: {\n    tooltipChange: \"tooltipChange\",\n    tooltipStateChanged: \"tooltipStateChanged\",\n    onShown: \"onShown\",\n    onHidden: \"onHidden\"\n  },\n  exportAs: [\"bs-tooltip\"]\n});\n/** @nocollapse */\n\n__decorate([OnChange(), __metadata(\"design:type\", Object)], TooltipDirective.prototype, \"tooltip\", void 0);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  TooltipDirective.prototype.tooltipId;\n  /**\n   * sets disable adaptive position\n   * @type {?}\n   */\n\n  TooltipDirective.prototype.adaptivePosition;\n  /**\n   * Content to be displayed as tooltip.\n   * @type {?}\n   */\n\n  TooltipDirective.prototype.tooltip;\n  /**\n   * Fired when tooltip content changes\n   * @type {?}\n   */\n\n  TooltipDirective.prototype.tooltipChange;\n  /**\n   * Placement of a tooltip. Accepts: \"top\", \"bottom\", \"left\", \"right\"\n   * @type {?}\n   */\n\n  TooltipDirective.prototype.placement;\n  /**\n   * Specifies events that should trigger. Supports a space separated list of\n   * event names.\n   * @type {?}\n   */\n\n  TooltipDirective.prototype.triggers;\n  /**\n   * A selector specifying the element the tooltip should be appended to.\n   * @type {?}\n   */\n\n  TooltipDirective.prototype.container;\n  /**\n   * Css class for tooltip container\n   * @type {?}\n   */\n\n  TooltipDirective.prototype.containerClass;\n  /**\n   * Allows to disable tooltip\n   * @type {?}\n   */\n\n  TooltipDirective.prototype.isDisabled;\n  /**\n   * Delay before showing the tooltip\n   * @type {?}\n   */\n\n  TooltipDirective.prototype.delay;\n  /**\n   * Emits an event when the tooltip is shown\n   * @type {?}\n   */\n\n  TooltipDirective.prototype.onShown;\n  /**\n   * Emits an event when the tooltip is hidden\n   * @type {?}\n   */\n\n  TooltipDirective.prototype.onHidden;\n  /**\n   * @deprecated - removed, will be added to configuration\n   * @type {?}\n   */\n\n  TooltipDirective.prototype.tooltipAnimation;\n  /**\n   * @deprecated\n   * @type {?}\n   */\n\n  TooltipDirective.prototype.tooltipFadeDuration;\n  /**\n   * @deprecated\n   * @type {?}\n   */\n\n  TooltipDirective.prototype.tooltipStateChanged;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  TooltipDirective.prototype._delayTimeoutId;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  TooltipDirective.prototype._tooltipCancelShowFn;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TooltipDirective.prototype._tooltip;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TooltipDirective.prototype._delaySubscription;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TooltipDirective.prototype._ariaDescribedby;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TooltipDirective.prototype._elementRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TooltipDirective.prototype._renderer;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TooltipDirective.prototype._positionService;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet TooltipModule = /*#__PURE__*/(() => {\n  class TooltipModule {\n    /**\n     * @return {?}\n     */\n    static forRoot() {\n      return {\n        ngModule: TooltipModule,\n        providers: [ComponentLoaderFactory, PositioningService]\n      };\n    }\n\n  }\n\n  TooltipModule.ɵfac = function TooltipModule_Factory(t) {\n    return new (t || TooltipModule)();\n  };\n\n  TooltipModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TooltipModule\n  });\n  TooltipModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return TooltipModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TooltipModule, {\n    declarations: function () {\n      return [TooltipDirective, TooltipContainerComponent];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [TooltipDirective];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { TooltipConfig, TooltipContainerComponent, TooltipDirective, TooltipModule }; //# sourceMappingURL=ngx-bootstrap-tooltip.js.map","map":null,"metadata":{},"sourceType":"module"}